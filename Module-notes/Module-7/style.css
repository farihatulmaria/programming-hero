/* visibility hidden VS diplay none */

.box {
  height: 200px;
  width: 200px;
  background: #072227;
  margin: 5px 5px;
}
#box-1 {
  background: #8946a6;
}
#box-2 {
  background: #072227;
  /* The visibility property specifies whether or not an element is visible. */

  visibility: hidden;
  /* Hidden elements take up space on the page. Use the display property to both hide and remove an element from the document layout! */
}
#box-3 {
  background: #9145b6;
}
#box-4 {
  background: #9a0680;
}
#box-5 {
  background: #700b97;
  /* The display property specifies the display behavior (the type of rendering box) of an element.
  The element is completely removed */
  display: none;
}

/* overflow */
.content-box {
  width: 300px;
  height: 300px;
  background: #000;
  color: #fff;
  margin: 10px 10px;
}
#content-1 {
  /* The overflow property only works for block elements with a specified height. */

  /* The overflow is clipped, but a scroll-bar is added to see the rest of the content */
  overflow: scroll;
}
#content-2 {
  /* The overflow is not clipped. It renders outside the element's box. This is default */
  overflow: visible;
}

#content-3 {
  /* The overflow is clipped, and the rest of the content will be invisible */
  overflow: hidden;
}
#content-4 {
  overflow-x: scroll;
  overflow-y: scroll;
}
#content-5 {
  width: 50px;
  height: 50px;
  background: #fff;
  color: #000;
  border: 2px solid #072227;
  overflow: hidden;
}
#content-5 p {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis !important;
}
/* img */
img {
  width: 500px;
}
/*  icons  */
svg {
  font-size: 50px !important;
}
/* transform */
.container {
  width: 200px;
  height: 200px;
  border: 2px solid seagreen;
  margin: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.innner-1 {
  /* The scale() method increases or decreases the size of an element (according to the parameters given for the width and height). */
  transform: scale(3);
}

.innner-2 {
  /* The rotate() method rotates an element clockwise or counter-clockwise according to a given degree. */
  transform: rotate(45deg);
}

.innner-3 {
  /* The translate() method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis). */
  transform: translate(100px);
}
.innner-4 {
  transform: translateX(50px);
}
.innner-5 {
  transform: translateY(50px);
}
/* transition */
#div-1,
#div-2,
#div-3,
#div-4,
#div-5 {
  width: 100px;
  height: 100px;
  background: #9145b6;
  color: #fff;
  margin: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
}
#div-1:hover,
#div-2:hover,
#div-3:hover,
#div-4:hover,
#div-5:hover {
  width: 100%;
}
#div-1 {
  transition: 3s ease;
}
#div-2 {
  transition: 3s ease-in;
}
#div-3 {
  transition: 3s ease-in-out;
}
#div-4 {
  transition: 3s ease-out;
}
#div-5 {
  transition: 3s linear;
}
#div-6 {
  width: 100px;
  height: 100px;
  background: #700b97;
  transition: 1s ease-in-out;
  margin: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  border-radius: 50%;
}
#div-6:hover {
  width: 200px;
  height: 200px;
  transform: rotate(360deg);
}
/* cricket aniamtion */
.field {
  width: 100%;
  height: 100vh;
  background: seagreen;
}

.bat {
  transform: rotate(30deg);
  transition: 0.3s ease-in-out;
  transform-origin: top right;
}
.field:hover .bat {
  transform: rotate(-60deg);
}
.ball {
  width: 50px;
  height: 50px;
  background: #ff0000ba;
  border-radius: 50%;
  position: relative;
  left: 48%;
  top: -16%;
  transition: 0.2s ease-in-out 0.3s;
}
.field:hover .ball {
  transform: translate(525px, -380px);
}
