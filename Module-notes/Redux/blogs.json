[
  {
    "Title": "How will you improve the performance of a React Application?",
    "image": "https://i.postimg.cc/4dPD0mw9/blog-1.jpg",
    "Descri": {
      "title": "React performance optimization techniques",
      "content": {
        "Keeping component state local where necessary": "We've learned that a state update in a parent component re-renders the parent and its child components.So, to ensure re-rendering a component only happens when necessary, we can extract the part of code that cares about the component state, making it local to that part of the code.",
        "Memoizing React components to prevent unnecessary re-renders": "Unlike the previous performance technique where refactoring our code gives us a performance boost, here we trade memory space for time. So, we must only memoize a component when necessary.Memoization is an optimization strategy that caches a component-rendered operation, saves the result in memory, and returns the cached result for the same input.In essence, if a child component receives a prop, a memoized component shallowly compares the prop by default and skips re-rendering the child component if the prop hasn't changed:",
        "Code-splitting in React using dynamic import()": "Code-splitting is another important optimization technique for a React application. By default, when a React application renders in a browser, a “bundle” file containing the entire application code loads and serves to users at once. This file generates by merging all the code files needed to make a web application work.The idea of bundling is useful because it reduces the number of HTTP requests a page can handle. However, as an application grows, the file sizes increase, thus increasing the bundle file. At a certain point, this continuous file increase slows the initial page load, reducing the user's satisfaction. With code-splitting, React allows us to split a large bundle file into multiple chunks using dynamic import() followed by lazy loading these chunks on-demand using the React.lazy. This strategy greatly improves the page performance of a complex React application. To implement code-splitting, we transform a normal React import like this:",
        "Windowing or list virtualization in React applications": "Imagine we have an application where we render several rows of items on a page. Whether or not any of the items display in the browser viewport, they render in the DOM and may affect the performance of our application.With the concept of windowing, we can render to the DOM only the visible portion to the user. Then, when scrolling, the remaining list items render while replacing the items that exit the viewport. This technique can greatly improve the rendering performance of a large list.",
        "Lazy loading images in React": "To optimize an application that consists of several images, we can avoid rendering all of the images at once to improve the page load time. With lazy loading, we can wait until each of the images is about to appear in the viewport before we render them in the DOM.Similar to the concept of windowing mentioned above, lazy loading images prevents the creation of unnecessary DOM nodes, boosting the performance of our React application"
      }
    }
  },
  {
    "Title": "What are the different ways to manage a state in a React application?",
    "image": "https://i.postimg.cc/C1WKCX3R/blog-2.jpg",
    "Descri": {
      "title": "The Four Kinds of React State to Manage",
      "content": {
        "There are four main types of state you need to properly manage in your React apps:": "Local state ,Global state,Server state, URL state",
        "How to Manage Local State in React": "Local state is perhaps the easiest kind of state to manage in React, considering there are so many tools built into the core React library for managing it.useState is the first tool you should reach for to manage state in your components.It can take accept any valid data value, including primitive and object values. Additionally, its setter function can be passed down to other components as a callback function (without needing optimizations like useCallback().useReducer is another option that can be used for either local or global state. It is similar in many ways to useState under the hood, although instead of just an initial state it accepts a reducer.The benefit of useReducer is that it provides a built-in way to perform a number of different state operations with the help of the reducer function, which makes it more dynamic overall than useState.",
        "How to Manage Global State in React": "Once you attempt to manage state across multiple components, things get a bit trickier.You will reach a point in your application where patterns like “lifting state up” and passing callbacks down to update your state from components lead to lots and lots of props.What do you do if you want to update a component's state from basically anywhere in your app? You turn it into global state.To manage it, however, you should opt for a third-party solution. Many developers are inclined to use built-in React features like the Context API to manage their state.The reason to not use Context for global state management lies in the way it works. The default behavior for Context is to re-render all children components if the value provided to it as a prop changes.In many cases, you do not want all children to update in response to a global state update, because all children may not be consuming or relying upon that global state. You only want to re-render if their props or state changes.",
        "How to Manage Server State in React": "Server state can be deceptively challenging to manage.At first, it seems you just need to fetch data and display it in the page. But then you need to display a loading spinner while you are waiting for the data. Then you need to handle errors and display them to the user as they arise.What happens when there is a network error? Do I really need to hit my server every time my user visits the home page if the data hasn't changed? Do I need to add useState and useEffect in every component I want to fetch my data?To fix this, there are a couple of great libraries that make data fetching in React a breeze: SWR and React Query.They not only give us a convenient hook to both get and change data from an API, but they keep track of all the necessary states and cache the data for us.",
        "How to Manage URL State in React": "To end a difficult topic on a positive note, URL state is largely already managed for you if you are using a framework like Next.js or the current version of React Router.URL state is quite easy to manage, usually through custom hooks that give us all the information we need about our location, history, and pathname."
      }
    }
  },
  {
    "Title": "How does prototypical inheritance work?",
    "image": "https://i.postimg.cc/cLR1wDjd/blog-3.jpg",
    "Descri": {
      "title": "Prototypical inheritance?",
      "content": {
        "What is prototypical inheritance?": "Simply put, prototypical inheritance refers to the ability to access object properties from another object. We use a JavaScript prototype to add new properties and methods to an existing object constructor. We can then essentially tell our JS code to inherit properties from a prototype. Prototypical inheritance allows us to reuse the properties or methods from one JavaScript object to another through a reference pointer function.All JavaScript objects inherit properties and methods from a prototype: Date objects inherit from Date.prototype,Array objects inherit from Array.prototype,Player objects inherit from Player.prototype.The Object.prototype is on top of the prototype inheritance chain. Date objects, Array objects, and Player objects all inherit from Object.prototype.",
        "Important terms": " ",
        "__proto__ property": "In Javascript, every object has its own hidden, internal property, [[Prototype]]. We can access that [[Prototype]] using the __proto__ property. This calls the program to mark the template object as a hidden type. JavaScript objects must be linked to this prototype object. Now, an object's properties can be accessed by the inheritor object.",
        "Object.create": "JavaScript ECMAScript 5 comes with the function Object.create( ). This method can be used to replacenew. We can use it to create an empty object based on a defined prototype and then assign it to a different prototype. Take a look at the syntax:",
        "Object.prototype.constructor": "All objects have a constructor property. If an object is created without the using a constructor function, it will have a constructor property. The constructor property will return a reference to the object's Objectconstructor function. It will return 1, true1, and ”test”`. Take a look at an example below.",
        "hasOwnProperty": "Using hasOwnProperty, we can test if an object contains a certain prototype property; the method will return true or false depending. This will help you clarify if an object has its own property or if it is inheriting instead.",
        "The Prototype Chain": "Prototypal inheritance uses the concept of prototype chaining. Let's explore that concept. Every object created contains [[Prototype]], which points either to another object or null. Envision an object C with a [[Prototype]] property that points to object B. Object B’s [[Prototype]] property points to prototype object A. This continues onward, forming a kind of chain called the prototype chain.This concept is used when searching our code. When we need to find a property in an object, it is first searched for in the object, and if not found, it is searched for on that object's prototype, and so on. Thus, the entire prototype chain is traversed until the property is found or nullis reached.",
        "Wrapping up": "Like JavaScript itself, prototypical inheritance is an invaluable tool in the world of website development and server management.Specifically, prototypes and prototypical inheritance are commonly used in many web application frameworks, such as AngularJS, to allow sharing of common behavior and state among similar components."
      }
    }
  },
  {
    "Title": "Why you do not set the state directly in React?",
    "image": "https://i.postimg.cc/pdk21mR7/blog-4.jpg",
    "Descri": {
      "title": "React has three lifecycle phases:",
      "content": {
        "React has three lifecycle phases:": "Mounting Phase,Mounting Phase,Unmounting Phase",
        "Mounting Phase:": "When the component is mounted for the first time. It has three lifecycle hooks that we commonly use: constructor,render, componentDidMount",
        "Updating Phase:": "When the component is already mounted and a change in state or props has happened. It has two lifecycle hooks that we commonly use:render,componentDidMount",
        "Unmounting Phase:": "When a component is deleted. It has one lifecycle hook that we commonly use:componentWillUnmount.All these lifecycle hooks are called in order.",
        "NeverTheLess": "Now, if you don't know what a Stateless functional component is, its a component that has no state or constructor or any lifecycle hooks and are fully controlled by their parents. They only render a react component.So now, what happens when a state or props is changed? It renders all its components again.React, keeps a track record of all its virtual DOM. Whenever a change happens, all the components are rendered and this new virtual DOM is then compared with the old virtual DOM. Only the differences found are then reflected in the original DOM.So, it's obvious from the statement that if we mutate the state directly, it will change the reference of the state in the previous virtual DOM as well. So, React won't be able to see that there is a change of the state and so it won't be reflected in the original DOM until we reload. The problem is more obvious when we extend a component with React.PureComponent instead of React.component , where React tries to optimize some time by not rendering components if no changes are found.Also, mutating the state directly can lead to odd bugs and components that are hard to optimize."
      }
    }
  },
  {
    "Title": "What is a unit test? Why should write unit tests?",
    "image": "https://i.postimg.cc/KYmGNPSB/blog-5.jpg",
    "Descri": {
      "title": "What is Unit Testing?",
      "content": {
        ".": "Unit testing involves testing individual components of the software program or application. The main purpose behind this is to check that all the individual parts are working as intended. A unit is known as the smallest possible component of software that can be tested. Generally, it has a few inputs and a single output.",
        "What is Unit Testing?": "UNIT TESTING is a type of software testing where individual units or components of a software are tested. The purpose is to validate that each unit of the software code performs as expected. Unit Testing is done during the development (coding phase) of an application by the developers. Unit Tests isolate a section of code and verify its correctness. A unit may be an individual function, method, procedure, module, or object.In SDLC, STLC, V Model, Unit testing is first level of testing done before integration testing. Unit testing is a WhiteBox testing technique that is usually performed by the developer. Though, in a practical world due to time crunch or reluctance of developers to tests, QA engineers also do unit testing.",
        "Why should write unit tests?": "Unit Testing is important because software developers sometimes try saving time doing minimal unit testing and this is myth because inappropriate unit testing leads to high cost Defect fixing during System Testing, Integration Testing and even Beta Testing after application is built. If proper unit testing is done in early development, then it saves time and money in the end."
      }
    }
  }
]
